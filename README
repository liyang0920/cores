#CORES

Instroduction
    We present CORES (Column-Oriented Regeneration Embedding Scheme) to push high-selective filters down into the column-based storage, where each filter consists of several filtering conditions on a field. By applying the filtering conditions to the column scan in storage, we show that both the I/O and the deserialization cost can be significantly reduced by introducing a fine-gained composition based on bitset. We also generalize this technique by two pair-wise operations rollup and drilldown, such that a series of conjunctive filters can effectively deliver their payloads in nested schema. The proposed methods are implemented on an open source platform. For practical purposes, we highlight how to effectively construct the nested column storage and efficiently drive multiple filters by a cost model. We apply this design to the nested relational model especially when hierarchical entities are frequently required by adhoc queries. The experiments, covering a real workload and the modified TPCH benchmark, demonstrate that CORES improves the performance by 0.7Xâˆ¼26.9X compared to the state-of-the-art platforms in scan-intensive workloads.

Important Implementation
1.cores.avro.FilterBatchColumnReader, the class that reads the cores files with filters. It conducts the columns about filters, initializes a bitset, delivers it through the scheme path, and then reads the fetching columns according the bitset.
2.cores.avro.FilterOperator,the interface that defines two functions of filters, getName() and isMatch(T t). getName() returns the name of the filter column, isMatch(T t) returns whether t is hitted by the filter.
3.cores.avro.mapreduce.NeciFilterRecordReader, the class that extends org.apache.hadoop.mapreduce.RecordReader, uses cores.avro.FilterBatchColumnReader to read the cores files in HDFS.
4.cores.core.UnionOutputBuffer/UnionInputBuffer, the class that writes/reads the columns with UNION type.

State-of-the-art Comparison
[project](https://github.com/liyang0920/cores)

Test
cores test: (https://github.com/liyang0920/cores/tree/master/avro/src/test/java/local/cores/query)
avro test: (https://github.com/liyang0920/cores/tree/master/avro/src/test/java/local/avro/query)
trevni test: (https://github.com/liyang0920/cores/tree/master/avro/src/test/java/local/trevni/query)
parquet test: (https://github.com/liyang0920/cores/tree/master/avro/src/test/java/local/parquet/query)

